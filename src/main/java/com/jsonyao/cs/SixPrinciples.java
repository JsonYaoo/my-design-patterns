package com.jsonyao.cs;

/**
 * 设计模式六大原则:
 * A. 单一职责原则
 *      a. 概念:
 *          a.1. 一个类只负责一项职责, 不要存在一个以上导致类发生变更的原因
 *      b. 优点:
 *          b.1. 可以降低类的复杂度, 一个类只负责一项职责, 逻辑简单清晰
 *          b.2. 提高类的可读性, 系统的可维护性更高
 *          b.3. 需求变更时出现风险更低, 因为可以降低对其他功能的影响
 *      c. 总结:
 *          c.1. 只有逻辑足够简单, 才可以在代码级别上违反单一职责原则
 *          c.2. 只有类中方法数量足够少, 才可以在方法级别上违反单一职责原则
 *          c.3. 模块化的程序设计以及在员工工作安排上面, 都适用单一职责原则
 * B. 里式替换原则
 *      a. 概念:
 *          a.1. 子类可以扩展父类的功能, 不能改变父类原有的功能; 子类可以替换父类, 同时方法或者行为不会发生改变
 *      b. 理解:
 *          b.1. 子类可以实现父类的抽象方法, 但不能覆盖父类的非抽象方法
 *          b.2. 子类中可以增加自己独特的方法
 *          b.3. 当子类的方法重载父类的方法时, 方法的前置条件(形参)要比父类方法更宽松
 *          b.4. 当子类的方法实现父类的抽象方法时, 方法的后置条件(返回值)要比父类更严格
 * C. 依赖倒置原则
 *      a. 概念:
 *          a.1. 高层模块不应该依赖底层模块, 二者都应该依赖其抽象
 *          a.2. 抽象不应该依赖细节, 细节应该依赖抽象
 *      b. 理解:
 *          b.1. 相对于细节的多变性, 抽象的东西要稳定的多, 以抽象为基础搭建起来的架构比以细节为基础搭建起来的架构要稳定的多
 *          b.2. 这里抽象指的是接口或者抽象类, 细节是具体的实现类, 使用抽象类或者接口的目的是, 制定好规范和契约, 不去涉及任何具体的操作,
 *               把展现的细节任务交给实现类完成
 *      c. 总结:
 *          c.1. 依赖倒置原则的核心思想是面向接口编程, 达到解耦的过程
 *          c.2. 底层模块尽量都要有抽象类或者接口
 *          c.3. 变量的声明类型尽量是抽象类或接口
 *          c.4. 使用继承时遵循里式替换原则
 * D. 接口隔离原则:
 *      a. 概念:
 *          a.1. 客户端不应该依赖它不需要的接口
 *          a.2. 一个类对另一个类的依赖应该建立在最小的接口上面
 *      b. 理解:
 *          b.1. 建立单一接口, 尽量细化接口, 接口中的方法尽量少
 *          b.2. 为单个类建立专用的接口, 不要包含太多
 *          b.3. 依赖几个专用的接口要比依赖一个综合的接口更灵活, 提高系统的灵活性和可维护性
 *      c. 注意:
 *          c.1. 接口尽量小, 但是要有限度, 过小则导致接口数量过多, 设计复杂化
 *          c.2. 为依赖接口的类定制服务, 只暴露给调用类需要的方法, 建立最小的依赖关系
 *          c.3. 提高内聚, 减少对外交互, 用最少的方法去完成最多的事情
 *      d. 对比单一职责原则:
 *          d.1. 单一职责原则注重的是职责; 而接口隔离原则注重的是对接口依赖的隔离
 *          d.2. 单一职责原则主要是约束类, 其次才是接口和方法, 针对的是程序中的实现和细节; 而接口隔离原则主要约束接口, 针对抽象和程序整体框架的构建
 * E. 迪米特法则:
 *      a. 概念:
 *          a.1. 迪米特法则在于降低类之间的耦合, 每个类尽量减少对其他类的依赖, 尽量减少对外暴露的方法, 使得功能模块独立, 低耦合
 *      b. 理解:
 *          b.1. 只和直接的朋友交流, 即只通过成员变量、方法的输入输出参数对类进行直接注入
 *          b.2. 减少对朋友的理解, 即减少一个类对外博爱路的方法
 *      c. 注意:
 *          c.1. 虽然可以避免和非直接的类通信, 但是要通信, 必然会通过一个中介来发生联系, 过分地使用迪米特法则, 会产生大量地中介和传递类, 导致系统复杂度变高
 * F. 开闭原则:
 *      a. 概念:
 *          a.1. 软件中的对象(类、模块、函数等)应该对于扩展是开放的, 对于修改是关闭的
 *      b. 理解:
 *          b.1. 当需求发生变化时, 尽量扩展实体的行为来变化, 而不是通过修改已有的代码来实现变化
 *          b.2. 底层模块的变化, 必然有高层模块进行耦合, 它并不意味着不做任何修改
 *          b.3. 这个原则比较虚, 可以通过具体的设计模式去加深理解
 * G. 总结:
 *      a. 单一职责原则告诉我们实现类要职责单一
 *      b. 里氏替换原则告诉我们不要破坏继承体系
 *      c. 依赖倒置原则告诉我们要面向接口编程
 *      d. 接口隔离原则告诉我们在设计接口的时候要精简单一
 *      e. 迪米特法则告诉我们要降低耦合
 *      f. 开发原则是总纲, 告诉我们要对扩展开放, 对修改关闭
 * H. Relation：
 *      a. https://www.jianshu.com/p/3f91776c3672
 */
public class SixPrinciples {
}
